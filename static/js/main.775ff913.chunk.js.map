{"version":3,"sources":["logo.svg","loading.svg","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","AlbumCover","src","this","props","track","album","images","url","alt","name","react_default","a","createElement","style","width","height","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","text","tracks","tracksLoaded","_this2","fetch","method","headers","Authorization","then","response","json","data","setState","items","track1","console","log","preview_url","className","logo","App_AlbumCover","lib_default","playStatus","Sound","status","PLAYING","length","loading","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.775ff913.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.79f6b6a0.svg\";","module.exports = __webpack_public_path__ + \"static/media/loading.9d4cbf40.svg\";","/*global swal*/\n\nimport React, { Component } from 'react';\nimport logo from './logo.svg';\nimport loading from './loading.svg';\nimport './App.css';\nimport Sound from 'react-sound';\nimport Button from './Button';\n\nconst apiToken = 'BQAWJDFJR5qXWo4szW2gFIjnih8hoHouWnipUcnXKa8GaL6sbEFCNl1oCrNcp-EpthQttGieb7BnTsRuFdESeh84VXEAwR9w_mtSlF7iVQMJjE0c5kQafKQiDNPV15SPo7fCD9A4WuKU8gw7jGBbQDmIlFy6G4nI5hQ';\n\nfunction shuffleArray(array) {\n  let counter = array.length;\n\n  while (counter > 0) {\n    let index = getRandomNumber(counter);\n    counter--;\n    let temp = array[counter];\n    array[counter] = array[index];\n    array[index] = temp;\n  }\n\n  return array;\n}\n\n/* Return a random number between 0 included and x excluded */\nfunction getRandomNumber(x) {\n  return Math.floor(Math.random() * x);\n}\n\nclass AlbumCover extends Component {\n  render() {\n    const src = this.props.track.album.images[0].url;\n    const alt = 'Album cover for ' + this.props.track.album.name;\n    return (<img src={src} alt={alt} style={{ width: 400, height: 400 }}/>);\n  }\n}\n\nclass App extends Component {\n\n  constructor() {\n    super();\n      this.state = {\n        text: \"\",\n        tracks: null,\n        tracksLoaded: false,\n    };\n  }\n\n  componentDidMount(){\n    fetch('https://api.spotify.com/v1/me/tracks', {\n      method: 'GET',\n      headers: {\n        Authorization: 'Bearer ' + apiToken,\n      },\n    })\n      .then(response => response.json())\n      .then((data) => {\n        this.setState({\n          tracksLoaded:true,\n          tracks: data.items,\n        });\n      });\n\n  }\n\n  render() {\n    if (!this.state.tracksLoaded) {\n      return (\n        <div className=\"App\">\n          <img src={loading} alt=\"Chargement en cours\"/>\n        </div>\n      );\n    }\n    else{\n      const track0 = this.state.tracks[0];\n      const track1 = this.state.tracks[1];\n      const track2 = this.state.tracks[2];\n      return (\n        console.log(this.state.tracks[0].track.name),\n        console.log(track1.track.preview_url),\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n            <h1 className=\"App-title\">Bienvenue sur le Blindtest</h1>\n          </header>\n          <div className=\"App-images\">\n          <AlbumCover track = {track1.track} />\n\n          <Sound url={track1.track.preview_url} playStatus={Sound.status.PLAYING}/>\n            <p>Nous avons chargé {this.state.tracks.length} chansons.</p>\n            <p>Titre de la première chanson : {this.state.tracks[0].track.name}.</p>\n          </div>\n          <div className=\"App-buttons\">\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}